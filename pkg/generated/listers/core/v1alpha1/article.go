/*
Copyright 2023 The Kuberiter Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/poneding/kuberiter/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ArticleLister helps list Articles.
// All objects returned here must be treated as read-only.
type ArticleLister interface {
	// List lists all Articles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Article, err error)
	// Articles returns an object that can list and get Articles.
	Articles(namespace string) ArticleNamespaceLister
	ArticleListerExpansion
}

// articleLister implements the ArticleLister interface.
type articleLister struct {
	indexer cache.Indexer
}

// NewArticleLister returns a new ArticleLister.
func NewArticleLister(indexer cache.Indexer) ArticleLister {
	return &articleLister{indexer: indexer}
}

// List lists all Articles in the indexer.
func (s *articleLister) List(selector labels.Selector) (ret []*v1alpha1.Article, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Article))
	})
	return ret, err
}

// Articles returns an object that can list and get Articles.
func (s *articleLister) Articles(namespace string) ArticleNamespaceLister {
	return articleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ArticleNamespaceLister helps list and get Articles.
// All objects returned here must be treated as read-only.
type ArticleNamespaceLister interface {
	// List lists all Articles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Article, err error)
	// Get retrieves the Article from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Article, error)
	ArticleNamespaceListerExpansion
}

// articleNamespaceLister implements the ArticleNamespaceLister
// interface.
type articleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Articles in the indexer for a given namespace.
func (s articleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Article, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Article))
	})
	return ret, err
}

// Get retrieves the Article from the indexer for a given namespace and name.
func (s articleNamespaceLister) Get(name string) (*v1alpha1.Article, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("article"), name)
	}
	return obj.(*v1alpha1.Article), nil
}
